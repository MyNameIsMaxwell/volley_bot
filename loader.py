from aiogram import Bot, Dispatcher, types
from loguru import logger
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from config_data import config
from database import datawork
from get_user_info import google_sheet_parse
from states.new_states import GreetingsStates

storage = MemoryStorage()
bot = Bot(token=config.BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)
scheduler = AsyncIOScheduler()


async def training_feedback(users_id, training_info):
   if users_id:
      text = "–ü–æ–Ω—Ä–∞–≤–∏–ª–∞—Å—å –ø—Ä–æ–±–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞?üòá"
      keyboard_markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True, one_time_keyboard=True)
      btns_text = ('–î–∞! –ë—ã–ª–æ –∑–¥–æ—Ä–æ–≤–æüòé', '–ù–µ—Ç! –°–∫—É—á–Ω–æüò§')
      keyboard_markup.row(*(types.KeyboardButton(text) for text in btns_text))
      # text = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üôå\n\n–ñ–¥–µ–º –í–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - 10 —Ä—É–±–ª–µ–π.\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π:\n\n1) —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É\n2) —Å–º–µ–Ω–Ω—É—é –æ–±—É–≤—å\n3) –±—É—Ç—ã–ª–∫—É —Å –≤–æ–¥–æ–π\n4) –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ\n5) —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!üòÄ\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!üòâ"
      # # –î–æ–±–∞–≤–∏—Ç—å —Å—á–∏—Ç—ã–≤–∞–Ω–∏–µ –¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
      for id_value in users_id:
         await bot.send_message(id_value, text, reply_markup=keyboard_markup)
   if training_info:
      locations_info = await datawork.locations_get(training_info['date'][2])
      try:
         for location in locations_info:
            address = location['street_name']
            name = location['name']
            map_location = location['map_location']
      except Exception as exp:
         print(exp)
         address = '(–ù–∞–±–µ—Ä–∏—Ç–µ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è)'
         name="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞:)"
      text = "–ò —Å–Ω–æ–≤–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!üôå\n\n–ñ–¥–µ–º –í–∞—Å –Ω–∞ –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ {date} —á–∏—Å–ª–∞ –≤ {time} –ø–æ –∞–¥—Ä–µ—Å—É {location}({name})üí™\n\n–°—Ç–æ–∏–º–æ—Å—Ç—å –ø—Ä–æ–±–Ω–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ - 10 —Ä—É–±–ª–µ–π.\n\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∑—è—Ç—å —Å —Å–æ–±–æ–π:\n\n1) —Å–ø–æ—Ä—Ç–∏–≤–Ω—É—é —Ñ–æ—Ä–º—É\n2) —Å–º–µ–Ω–Ω—É—é –æ–±—É–≤—å\n3) –±—É—Ç—ã–ª–∫—É —Å –≤–æ–¥–æ–π\n4) –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ\n5) —Ö–æ—Ä–æ—à–µ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!üòÄ\n\n–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã - —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏\n\n–î–æ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ!üòâ".format(
         date=training_info['date'][0] + ' ' + training_info['date'][1],
         time=training_info['date'][3],
         location=address,
         name=name
      )
      keyboard_markup = types.InlineKeyboardMarkup()
      keyboard_markup.add(types.InlineKeyboardButton('–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ', url=f"{map_location}"))
      await bot.send_message(training_info['user'], text, reply_markup=keyboard_markup)

      # await GreetingsStates.training_interest.set()


async def check_situation():
   google_sheet_parse.changes_check()
   await google_sheet_parse.training_status_true()

logger.add(config.LOG_PATH, format="{time} - {level} - {message}", level="DEBUG", rotation="10 MB", compression="zip")
# job = scheduler.add_job(check_situation, 'interval', minutes=60)
job = scheduler.add_job(check_situation, 'interval', seconds=30)